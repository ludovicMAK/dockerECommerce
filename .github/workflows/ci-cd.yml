name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  IMAGE_NAME: e-commerce
  REGISTRY_URL: ${{ secrets.REGISTRY_URL }}

jobs:
  test:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'
      - name: Run Tests
        run: |
          chmod +x ./scripts/run-tests.sh
          ./scripts/run-tests.sh

  verify-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Check Required Secrets
        run: |
          if [ -z "${{ secrets.REGISTRY_URL }}" ]; then
            echo "Error: REGISTRY_URL secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.REGISTRY_USER }}" ]; then
            echo "Error: REGISTRY_USER secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.REGISTRY_PASSWORD }}" ]; then
            echo "Error: REGISTRY_PASSWORD secret is not set"
            exit 1
          fi

  build-and-push:
    needs: [test, verify-secrets]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      
      - name: Build and push images
        env:
          REGISTRY: ${{ secrets.REGISTRY_URL }}
          SHA: ${{ github.sha }}
        run: |
          SERVICES=("frontend" "auth-service" "product-service" "order-service")
          BRANCH_TAG=${{ github.ref == 'refs/heads/main' && 'latest' || 'develop' }}
          
          for service in "${SERVICES[@]}"; do
            echo "Building $service..."
            
            # DÃ©finir le context et dockerfile
            if [ "$service" == "product-service" ]; then
              CONTEXT="."
              DOCKERFILE="services/product-service/Dockerfile"
            else
              CONTEXT="./services/$service"
              DOCKERFILE="Dockerfile"
              [ "$service" == "frontend" ] && CONTEXT="./frontend"
            fi
            
            # Build et push
            docker build -t $REGISTRY/$IMAGE_NAME/$service:$SHA \
              -t $REGISTRY/$IMAGE_NAME/$service:$BRANCH_TAG \
              -f $DOCKERFILE $CONTEXT
            
            docker push $REGISTRY/$IMAGE_NAME/$service:$SHA
            docker push $REGISTRY/$IMAGE_NAME/$service:$BRANCH_TAG
            
            echo "Successfully pushed $service images"
          done
